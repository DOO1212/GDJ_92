<?xml version="1.0" encoding="UTF-8"?>
<!-- 이 문서가 MyBatis Mapper 3.0 규격을 따르는 XML 파일임을 선언합니다. -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<!-- namespace: 이 Mapper XML이 어떤 DAO 인터페이스와 연결될지 지정합니다. -->
<!-- 반드시 DAO의 전체 경로와 일치해야 합니다. -->
<mapper namespace="com.winter.app.board.qna.QnaDAO">
  	
    <!-- <resultMap>: DB 조회 결과를 Java 객체(VO)에 매핑하는 규칙을 상세하게 정의합니다. -->
    <!-- type="QnaVO": 결과를 QnaVO 객체에 담을 것입니다. -->
    <!-- id="detailResult": 이 규칙의 고유한 이름입니다. -->
  	<resultMap type="QnaVO" id="detailResult">
        <!-- <id>: Primary Key 컬럼을 매핑합니다. -->
  		<id column="BOARD_NUM" property="boardNum"/>
        <!-- <result>: 일반 컬럼들을 매핑합니다. DB의 컬럼명(column)을 VO의 필드명(property)에 연결합니다. -->
  		<result column="BOARD_TITLE" property="boardTitle"/>
  		<result column="BOARD_WRITER" property="boardWriter"/>
  		<result column="BOARD_CONTENTS" property="boardContents"/>
  		<result column="BOARD_DATE" property="boardDate"/>
  		<result column="BOARD_HIT" property="boardHit"/>
        <!-- Q&A 게시판의 계층 구조를 위한 필드 매핑 -->
  		<result column="BOARD_REF" property="boardRef"/>
  		<result column="BOARD_Step" property="boardStep"/>
  		<result column="BOARD_Depth" property="boardDepth"/>
        <!-- <collection>: 1:N 관계(게시글 1개 : 첨부파일 N개)를 매핑합니다. -->
        <!-- property="boardFileVOs": QnaVO 안에 있는 List<BoardFileVO> 타입의 필드 이름입니다. -->
        <!-- ofType="BoardFileVO": 이 List에 담길 객체의 타입입니다. -->
  		<collection property="boardFileVOs" javaType="java.util.List" ofType="BoardFileVO">
	  		<id column="FILE_NUM" property="fileNum" />
	  		<result column="ORI_NAME" property="oriName"/>
	  		<result column="SAVE_NAME" property="saveName"/>	
  		</collection>
  	</resultMap>
  
    <!-- <sql>: 재사용할 수 있는 SQL 조각을 정의합니다. id는 이 조각의 이름입니다. -->
    <sql id="search">
        <!-- <where>: 내부 조건이 하나라도 있으면 자동으로 WHERE 키워드를 붙여줍니다. -->
  		<where>
         <!-- <choose>: Java의 switch-case 문과 비슷하게, 여러 조건 중 하나를 선택합니다. -->
  		 <choose>
            <!-- Pager 객체의 kind 필드 값이 'k1'이면 BOARD_TITLE을 검색합니다. -->
  		 	<when test="kind=='k1'">
  		 		BOARD_TITLE
  		 	</when>
            <!-- kind 필드 값이 'k2'이면 BOARD_CONTENTS를 검색합니다. -->
  		 	<when test="kind=='k2'">
  		 		BOARD_CONTENTS
  		 	</when>
            <!-- 그 외의 경우(k3 등)는 BOARD_WRITER를 검색합니다. -->
  		 	<otherwise>
  		 		BOARD_WRITER
  		 	</otherwise>
  		 </choose>
         <!-- Pager 객체의 keyword 필드 값으로 LIKE 검색을 수행합니다. -->
  		 LIKE CONCAT('%',#{keyword}, '%')
  		 </where>
  	</sql>	
  	
    <!-- id="list": QnaDAO의 list 메서드와 연결됩니다. -->
    <!-- resultType="QnaVO": 조회된 각 행을 QnaVO 객체에 담아 반환합니다. -->
  	<select id="list" resultType="QnaVO" parameterType="Pager">
  		SELECT * FROM QNA 
        <!-- <include>: 위에서 정의한 'search' SQL 조각을 여기에 삽입합니다. -->
  		<include refid="search"></include>
        <!-- 계층형 목록의 핵심 정렬: 그룹(REF)으로 묶고, 그룹 내 순서(STEP)로 정렬합니다. -->
  		ORDER BY BOARD_REF DESC, BOARD_STEP ASC
        <!-- 페이징 처리를 위한 limit 절입니다. -->
  		limit #{startIndex}, #{perPage}
  	</select>
  
    <!-- id="totalCount": QnaDAO의 totalCount 메서드와 연결됩니다. -->
  	<select id="totalCount" resultType="Long" parameterType="Pager">
  		SELECT COUNT(BOARD_NUM) FROM QNA
  		<include refid="search"></include>
  	</select>
  
    <!-- id="detail": QnaDAO의 detail 메서드와 연결됩니다. -->
    <!-- resultMap="detailResult": 조회 결과를 위에서 정의한 'detailResult' 규칙에 따라 매핑합니다. -->
  	<select id="detail" parameterType="QnaVO" resultMap="detailResult">
  		 SELECT * FROM 
  			QNA N
            <!-- 게시글에 파일이 없어도 게시글은 나와야 하므로 LEFT JOIN 사용 -->
  			LEFT JOIN
  			QNAFILES F
            <!-- 두 테이블의 조인 조건 컬럼명이 같을 때 사용하는 간결한 문법입니다. -->
  			USING(board_num)
  		WHERE N.BOARD_NUM=#{boardNum}
  	</select>
  	
  	
  	<!-- id="insert": QnaDAO의 insert 메서드와 연결됩니다. -->
    <!-- useGeneratedKeys="true": DB가 자동으로 생성한 키(Auto Increment 값)를 사용하겠다고 설정합니다. -->
    <!-- keyProperty="boardNum": 생성된 키 값을 파라미터로 받은 QnaVO 객체의 'boardNum' 필드에 담아줍니다. -->
  	<insert id="insert" parameterType="QnaVO" useGeneratedKeys="true" keyProperty="boardNum">
  		INSERT INTO QNA 
  		(BOARD_NUM, BOARD_TITLE, BOARD_CONTENTS, BOARD_WRITER, BOARD_DATE, BOARD_HIT,
  		 BOARD_REF, BOARD_STEP, BOARD_DEPTH	
  		)
  		VALUES
  		(NULL, #{boardTitle}, #{boardContents}, #{boardWriter}, now(), 0, #{boardRef},#{boardStep},#{boardDepth})
  	</insert>
  	
    <!-- 첨부파일 정보를 DB에 저장하는 쿼리입니다. -->
  	<insert id="insertFile" parameterType="BoardFileVO">
  		INSERT INTO QNAFILES
  		VALUES(NULL, #{oriName}, #{saveName}, #{boardNum})
  	</insert>
  	
    <!-- 원본글 등록 시, 자신의 글 번호(boardNum)를 그룹 번호(boardRef)로 설정하는 쿼리입니다. -->
  	<update id="refUpdate" parameterType="QnaVO">
  		UPDATE QNA SET BOARD_REF=#{boardNum} WHERE BOARD_NUM=#{boardNum}
  	</update>
  	
    <!-- 답글 등록 시, 새 답글이 들어갈 자리를 만들기 위해 기존 답글들의 순서를 뒤로 미루는 쿼리입니다. -->
  	<update id="replyUpdate" parameterType="QnaVO">
  		UPDATE QNA SET BOARD_STEP=BOARD_STEP+1
  		WHERE BOARD_REF=#{boardRef} AND BOARD_STEP > #{boardStep}
  	</update>
  	
    <!-- 게시글의 제목과 내용을 수정하는 쿼리입니다. -->
  	<update id="update" parameterType="QnaVO">
  		UPDATE QNA
  		SET 
  			BOARD_TITLE=#{boardTitle},
  			BOARD_CONTENTS=#{boardContents}
  		WHERE
  			BOARD_NUM=#{boardNum}
  	</update>
  	
    <!-- 논리적 삭제(Soft Delete): 답글 구조를 유지하기 위해 실제 행을 지우지 않고 제목만 null로 바꿉니다. -->
  	<delete id="delete" parameterType="QnaVO">
  		UPDATE QNA SET BOARD_TITLE=null WHERE BOARD_NUM=#{boardNum}
  	</delete>
  	
    <!-- 특정 게시글에 속한 모든 첨부파일 정보를 DB에서 삭제합니다. -->
  	<delete id="fileDelete" parameterType="QnaVO" >
  		DELETE FROM QNAFILES WHERE BOARD_NUM=#{boardNum}
  	</delete>
  	
    <!-- 특정 첨부파일 하나의 상세 정보를 조회합니다. -->
  	<select id="fileDetail" parameterType="BoardFileVO" resultType="BoardFileVO">
  		SELECT * FROM QNAFILES WHERE FILE_NUM=#{fileNum}
  	</select>
  	
    <!-- 특정 첨부파일 하나만 DB에서 삭제합니다. -->
  	<delete id="fileDeleteOne" parameterType="BoardFileVO">
  		DELETE FROM QNAFILES WHERE FILE_NUM=#{fileNum}
  	</delete>

</mapper>