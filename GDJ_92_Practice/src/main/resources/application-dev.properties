# spring.application.name: 이 프로젝트의 고유한 이름을 지정합니다.
spring.application.name=GDJ_92_Maven

#################################

# server.port: 내장 웹 서버(Tomcat)가 사용할 포트 번호를 지정합니다. (HTTP 기본 포트: 80)
server.port=80

################################## JSP 설정

# spring.mvc.view.prefix: Spring MVC 컨트롤러가 뷰(View) 파일을 찾을 때 사용할 경로의 접두사입니다.
spring.mvc.view.prefix=/WEB-INF/views/

# spring.mvc.view.suffix: 뷰 파일을 찾을 때 사용할 파일 확장자입니다.
# prefix와 suffix가 조합되어 "/WEB-INF/views/파일이름.jsp" 경로를 완성합니다.
spring.mvc.view.suffix=.jsp

################################## MyBatis 설정

# spring.datasource.hikari.username: 데이터베이스(MySQL) 접속용 사용자 이름입니다.
spring.datasource.hikari.username=user01
# spring.datasource.hikari.password: 데이터베이스 접속용 비밀번호입니다.
spring.datasource.hikari.password=user01

# spring.datasource.url: 데이터베이스 연결 주소(URL)입니다.
# SQL 로그를 자세히 보기 위해 Log4Jdbc 라이브러리를 사용하고 있습니다.
spring.datasource.url=jdbc:log4jdbc:mysql://localhost:3306/user01
# spring.datasource.driver-class-name: 사용할 JDBC 드라이버 클래스입니다.
# Log4Jdbc의 드라이버를 지정하여 SQL 호출을 추적합니다.
spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy

# mybatis.mapper-locations: Mapper XML 파일 경로 설정 (현재 주석 처리됨)
#mybatis.mapper-locations=classpath:database/mappers/*Mapper.xml
# mybatis.config-location: 별도의 MyBatis 설정 파일 경로 (현재 주석 처리됨)
#mybatis.config-location=classpath:database/config/MybatisConfig.xml

# mybatis.type-aliases-package: DTO, VO 등 모델 클래스가 있는 패키지를 지정합니다.
# 이 설정으로 Mapper XML에서 클래스의 전체 경로 대신 짧은 별칭을 사용할 수 있습니다.
mybatis.type-aliases-package=com.winter.app

# mybatis.configuration.map-underscore-to-camel-case: DB 컬럼명(snake_case)을 Java 필드명(camelCase)으로 자동 매핑합니다.
mybatis.configuration.map-underscore-to-camel-case=true

#########################################################
## FileUpload (파일 업로드 설정)

# spring.servlet.multipart.enabled: HTTP multipart 요청을 활성화할지 여부를 결정합니다.
# 파일 업로드 기능을 사용하려면 반드시 'true'로 설정해야 합니다.
spring.servlet.multipart.enabled=true

# spring.servlet.multipart.max-file-size: 업로드되는 개별 파일의 최대 크기를 제한합니다.
# 여기서는 파일 하나당 5MB를 초과할 수 없습니다.
spring.servlet.multipart.max-file-size=5MB

# spring.servlet.multipart.max-request-size: 한 번의 요청으로 전송될 수 있는 모든 파일의 총합 최대 크기를 제한합니다.
# 여기서는 여러 파일을 동시에 업로드할 때 그 총합이 25MB를 초과할 수 없습니다.
spring.servlet.multipart.max-request-size=25MB

### FileUpload (사용자 정의 경로 설정)
# app.upload: 이것은 Spring Boot 표준 설정이 아닌, 개발자가 직접 정의한 '커스텀 속성'입니다.
# 업로드된 파일이 실제로 저장될 서버의 물리적 디스크 경로를 지정합니다.
# Java 코드 내에서 @Value("${app.upload}") 어노테이션 등으로 이 값을 읽어와 사용하게 됩니다.
app.upload=D:/upload/

# app.url: 이 또한 커스텀 속성입니다.
# 업로드된 파일에 웹 브라우저를 통해 접근할 때 사용할 URL 경로 패턴을 지정합니다.
# 예를 들어, /files/이미지.jpg 와 같은 URL로 파일에 접근하도록 설정할 때 사용됩니다.
app.url=/files/**

#########################################################
# board.notice, board.qna: 이것들도 커스텀 속성입니다.
# 코드 내에서 게시판의 종류를 문자열("notice", "qna")로 직접 쓰는 대신, 이 속성 값을 참조하여 사용합니다.
# 이렇게 하면 나중에 게시판 이름이 변경되더라도 코드 수정 없이 이 설정 파일만 변경하면 되므로 유지보수에 용이합니다.
board.notice=notice
board.qna=qna