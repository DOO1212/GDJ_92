# ===================================================================
# 1. Spring Core 설정
# ===================================================================

# 애플리케이션의 고유한 이름을 정의합니다. 
# 이 이름은 로깅(Logging)이나 JMX(Java Management Extensions) 등에서 애플리케이션을 식별하는 데 사용됩니다.
# MSA(Microservice Architecture) 환경에서는 서비스 검색(Service Discovery) 컴포넌트에 등록되는 이름이 되기도 합니다.
spring.application.name=GDJ_92_Maven


# ===================================================================
# 2. 내장 WAS(Web Application Server) 설정
# ===================================================================

# 내장 서버(기본값은 Tomcat)가 사용할 포트 번호를 지정합니다.
# 기본 포트는 8080이며, 80으로 설정하면 'http://서버주소'와 같이 포트 번호 없이 접속할 수 있습니다.
# (참고) 실제 서비스 환경에서는 보안이나 권한 문제로 애플리케이션은 8080 같은 다른 포트에서 실행하고, 
# 웹 서버(Nginx, Apache 등)가 80 포트로 들어온 요청을 애플리케이션 포트로 전달(Reverse Proxy)하는 방식을 많이 사용합니다.
server.port=80


# ===================================================================
# 3. Spring MVC (View Resolver) 설정
# ===================================================================

# Controller가 반환하는 문자열(View 이름)에 접두사(prefix)를 붙여 실제 JSP 파일의 경로를 완성합니다.
# 예를 들어, 컨트롤러가 "home"을 반환하면 "/WEB-INF/views/home" 이라는 경로를 만듭니다.
spring.mvc.view.prefix=/WEB-INF/views/

# Controller가 반환하는 문자열(View 이름)에 접미사(suffix)를 붙여 파일의 확장자를 지정합니다.
# 위 prefix와 결합되어, 컨트롤러가 "home"을 반환하면 최종적으로 "/WEB-INF/views/home.jsp" 파일을 찾아 렌더링합니다.
spring.mvc.view.suffix=.jsp


# ===================================================================
# 4. 데이터베이스 연결 (Datasource) 설정
# ===================================================================
# Spring Boot 2.0 이상부터는 HikariCP가 기본 Connection Pool로 사용됩니다.

# 데이터베이스 접속 계정(아이디)을 설정합니다.
spring.datasource.hikari.username=user01

# 데이터베이스 접속 비밀번호를 설정합니다.
# (주의) 이렇게 설정 파일에 비밀번호를 직접 작성하는 것은 개발 환경에서는 편리하지만,
# 실제 서비스 환경에서는 보안에 매우 취약합니다. 보통은 환경 변수나 외부 설정 파일, Vault 같은 보안 솔루션을 통해 관리합니다.
spring.datasource.hikari.password=user01

# --- 일반적인 MySQL JDBC 설정 (현재는 주석 처리됨) ---
# 데이터베이스 서버의 위치와 사용할 데이터베이스를 지정하는 JDBC URL입니다.
# 현재는 아래의 log4jdbc 설정을 사용하기 위해 주석 처리되었습니다.
#spring.datasource.url=jdbc:mysql://localhost:3306/user01
# JDBC 드라이버 클래스의 전체 경로를 지정합니다. MySQL 8.x 버전의 드라이버입니다.
# 이 또한 log4jdbc 설정을 사용하기 위해 주석 처리되었습니다.
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# --- SQL 로깅을 위한 Log4Jdbc 설정 ---
# Log4Jdbc는 실행되는 SQL 쿼리를 로그로 확인할 수 있게 해주는 라이브러리입니다.
# 기존 JDBC URL 앞에 'jdbc:log4jdbc:'를 붙여서 SQL 로깅을 활성화합니다.
# 어떤 쿼리가, 어떤 파라미터로, 얼마나 오래 실행되는지 파악할 수 있어 개발 및 디버깅 시 매우 유용합니다.
spring.datasource.url=jdbc:log4jdbc:mysql://localhost:3306/user01

# 실제 JDBC 드라이버를 감싸는(Wrapping) Log4Jdbc의 드라이버(DriverSpy)를 지정합니다.
# 이 드라이버가 중간에서 SQL을 가로채 로그를 남기고, 실제 MySQL 드라이버에 작업을 위임합니다.
# 프로덕션(실제 서비스) 환경에서는 성능 저하를 유발할 수 있으므로 보통 개발 환경에서만 사용합니다.
spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy


# ===================================================================
# 5. MyBatis 연동 설정
# ===================================================================

# SQL 쿼리가 작성된 Mapper XML 파일들의 위치를 지정하는 설정입니다. (현재 주석 처리)
# 'classpath:'는 'src/main/resources' 경로를 의미합니다. '.../mappers/' 폴더 아래의 '*Mapper.xml'로 끝나는 모든 파일을 찾습니다.
# Spring Boot는 기본적으로 `classpath:mappers/**/*.xml`을 탐색하므로, 규칙을 따른다면 이 설정은 생략 가능합니다.
#mybatis.mapper-locations=classpath:database/mappers/*Mapper.xml

# MyBatis의 상세 설정을 담고 있는 XML 파일의 위치를 지정합니다. (현재 주석 처리)
# application.properties에서 대부분의 설정이 가능하기 때문에 복잡한 설정이 필요 없을 경우 생략하는 경우가 많습니다.
#mybatis.config-location=classpath:database/config/MybatisConfig.xml

# XML Mapper에서 사용할 타입 별칭(Type Alias)을 자동으로 스캔할 패키지 경로를 지정합니다.
# 예를 들어, `com.winter.app.board.BoardVO` 클래스가 있다면, XML에서 긴 전체 경로 대신 `BoardVO`라는 짧은 이름으로 사용할 수 있게 됩니다.
# DTO, VO 등 데이터 객체가 모여있는 패키지를 지정하는 것이 일반적입니다.
mybatis.type-aliases-package=com.winter.app

# 데이터베이스의 스네이크 케이스(snake_case, 예: board_id) 컬럼명과 
# 자바 객체의 카멜 케이스(camelCase, 예: boardId) 필드명을 자동으로 매핑해주는 기능입니다.
# 이 설정을 true로 하면, 번거로운 `<resultMap>` 태그 작성을 크게 줄일 수 있어 매우 편리합니다.
mybatis.configuration.map-underscore-to-camel-case=true


# ===================================================================
# 6. 사용자 정의 프로퍼티 설정
# ===================================================================

# Spring Boot나 라이브러리가 사용하는 표준 프로퍼티가 아닌, 개발자가 직접 정의한 값입니다.
# 'board'라는 접두사로 그룹화하여 게시판의 종류를 정의한 것으로 보입니다.
# 이 값들은 애플리케이션 내에서 `@Value("${board.notice}")` 와 같은 형태로 주입받아 사용할 수 있습니다.
# 예를 들어, 공지사항 게시판과 Q&A 게시판의 로직을 구분하는 데 활용될 수 있습니다.
board.notice=notice
board.qna=qna